import os
import arch

vars = Variables()
vars.AddVariables(
  EnumVariable( 'example', 'Example that should be compiled', 'minimal',
                allowed_values=('hosvd', 'minimal', 'stock', 'tce')),
  EnumVariable( 'compileMode', 'Mode of the compilation', 'release',
                allowed_values=('debug', 'release')),
  EnumVariable( 'arch',
                'Precision and architecture.',
                'dsnb',
                allowed_values=arch.getArchitectures()
              ),
  BoolVariable( 'unitTests', 'Build unit tests', False ),
)

# set environment
env = Environment(variables=vars)
env['ENV'] = os.environ
env['CC'] = env['ENV']['CC']
env['CXX'] = env['ENV']['CXX']

# generate help text
Help(vars.GenerateHelpText(env))
  
# handle unknown, maybe misspelled variables
unknownVariables = vars.UnknownVariables()

# exit in the case of unknown variables
if unknownVariables:
  raise EnvironmentError("*** The following build variables are unknown: " + str(unknownVariables.keys()))

# c++ standard
env.Append(CXXFLAGS=['-std=c++11'])
env.Append(LINKFLAGS=['-qopenmp'])

# include directories
env.Append( CPPPATH=['#/../include/', env['example'], 'common'] )

# Architecture dependent settings
archFlags = arch.getFlags(env['arch'])
env.Append( CXXFLAGS  = archFlags,
            LINKFLAGS = archFlags )
env.Append(CPPDEFINES=arch.getDefines(env['arch']))

# Compiler optimisation settings
if env['compileMode'] == 'release':
  optFlags = ['-O2']
  env.Append(CPPDEFINES='NDEBUG')
else:
  optFlags = ['-O0']

env.Append( CXXFLAGS  = optFlags,
            LINKFLAGS = optFlags )

genCodeDir = env['example'] + '/generated_code'
addOutDir = lambda it: [os.path.join(genCodeDir, i) for i in it]

sources = addOutDir(['kernel.cpp', 'init.cpp', 'tensor.cpp'])
sourcesNoRedZone = addOutDir(['subroutine.cpp'])
headers = addOutDir(['kernel.h', 'init.h', 'tensor.h', 'subroutine.h'])
headersUnitTests = addOutDir(['KernelTest.t.h'])

env.Append(BUILDERS = {'Generate': Builder(generator=lambda target, source, env, for_signature: './example.py --arch {} {}'.format(env['arch'], env['example']))})
generated = env.Generate(sources + sourcesNoRedZone + headers + headersUnitTests,
                         ['example.py', env['example'] + '.py'])

objects = [env.Object(source) for source in sources]
# Compile with -mno-red-zone due to bug in libxsmm
objectsNoRedZone = [env.Object(source, CXXFLAGS=env['CXXFLAGS'] + '-mno-red-zone') for source in sourcesNoRedZone]

mainObj = env.Object(os.path.join(env['example'], 'performance.cpp'))
env.Program(os.path.join(env['example'], 'performance'), objects + objectsNoRedZone + [mainObj])

if env['unitTests']:
  env.Tool('cxxtest')
  env.CxxTest(os.path.join(env['example'], 'unit_tests'), headersUnitTests + objects + objectsNoRedZone)

#~ env.Append(CPPDEFINES=['CXXTEST_HAVE_EH', 'CXXTEST_ABORT_TEST_ON_FAIL'])
#~ env['CXXTEST'] = '/home/uphoff/SeisSol/submodules/cxxtest'
#~ env.Tool('cxxtest')

#~ sourceFiles.append(os.path.join('generated_code', 'KernelTest.t.h'))

#~ env.CxxTest(target='generated_kernels_test_suite', source=sourceFiles)
